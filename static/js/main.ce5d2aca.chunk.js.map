{"version":3,"sources":["BooksAPI.js","components/AddABookButton.js","components/Book.js","components/SearchBooks.js","container/App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","AddABookButton","className","role","to","Book","book","books","title","author","preview","reload","changeShelf","event","shelf","fetch","id","method","body","JSON","stringify","then","res","json","BooksAPI","target","value","response","synchronizeShelfNameOnSearchedBooks","categorizedBook","class","undefined","style","width","height","backgroundImage","thumbnail","background","onChange","disabled","SearchBooks","props","search","query","setState","data","Array","isArray","searchedBooks","catch","err","console","error","state","this","type","placeholder","length","map","key","authors","imageLinks","Component","App","filterBooksByShelf","currentlyReading","wantToRead","read","forEach","includes","push","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce5d2aca.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\r\nimport '../container/App.css';\r\nimport {Link} from 'react-router-dom';\r\n \r\nconst AddABookButton = ()=>{\r\n    return(\r\n        <div className=\"open-search\">\r\n              <Link className=\"add-a-book-link\" role=\"button\" to=\"/search\" >Add a book</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddABookButton;","import React from 'react';\r\nimport '../container/App.css';\r\nimport * as BooksAPI from '../BooksAPI';\r\n\r\nconst Book = ({book, books, title, author, preview,reload}) => {\r\n\r\n    const changeShelf = (event) => {\r\n        BooksAPI.update(book, event.target.value)\r\n            .then((response)=>{\r\n                reload();\r\n            });\r\n    }\r\n\r\n    const synchronizeShelfNameOnSearchedBooks = (book)=>{\r\n        for(let categorizedBook of books){\r\n            if(categorizedBook.id === book.id){\r\n                return categorizedBook.shelf;\r\n            }\r\n        }\r\n        return 'none';\r\n    }\r\n    \r\n    return (\r\n        <li>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div class=\"shelf-name\">\r\n                    <h4>{synchronizeShelfNameOnSearchedBooks(book) === \"none\" ? \"Not in Library\" : synchronizeShelfNameOnSearchedBooks(book) }</h4>\r\n                    </div>\r\n                    {\r\n                        preview !== undefined ? <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage:'url(' + preview.thumbnail + ')' }}></div>\r\n                        : <div className=\"book-cover\" style={{ width: 128, height: 193, background:\"white\" }}>\r\n                            <h5 className=\"no-book-cover\">No Book Cover </h5>\r\n                        </div>\r\n                    }\r\n                    <div className=\"book-shelf-changer\">\r\n                        <select value={book.shelf ? book.shelf : synchronizeShelfNameOnSearchedBooks(book)} onChange={(event) => changeShelf(event)}>\r\n                            <option value=\"move\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{title}</div>\r\n                <div className=\"book-authors\">{author}</div>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Book;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Book from '../components/Book';\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport '../container/App.css';\r\n\r\nclass SearchBooks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: '',\r\n            searchedBooks: []\r\n        }\r\n    }\r\n\r\n\r\n    search = (event) => {\r\n        this.setState({ query: event.target.value });\r\n        if (event.target.value !== \"\") {\r\n            BooksAPI.search(event.target.value)\r\n                .then((books) => {\r\n                    if (!Array.isArray(books)) {\r\n                        this.setState({ searchedBooks: [] });\r\n                    }\r\n                    else {\r\n                        this.setState({ searchedBooks: books });\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    console.error('Unable to fetch searched Books', err);\r\n                })\r\n        }\r\n        else {\r\n            this.setState({ searchedBooks: [] });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to=\"/\" role=\"button\" className=\"close-search\" >Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/*\r\n                            NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                            You can find these search terms here:\r\n                            https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n            \r\n                            However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                            you don't find a specific author or title. Every search is limited by search terms.\r\n                        */}\r\n                        <input value={this.state.query} onChange={(event) => this.search(event)} type=\"text\" placeholder=\"Search by title or author\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {\r\n                            this.state.query === \"\" || this.state.searchedBooks.length === 0 ?\r\n                                <h4 className=\"search-display\">Searching for {`\"${this.state.query}\"`}</h4>\r\n                                : this.state.searchedBooks.map((book) =>\r\n                                    <Book key={book.id}\r\n                                        book={book}\r\n                                        books={this.props.books}\r\n                                        id={book.id}\r\n                                        title={book.title}\r\n                                        author={book.authors}\r\n                                        preview={book.imageLinks}\r\n                                        reload = {this.props.reload}\r\n                                         />\r\n                                )\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBooks;","import React, { Component } from 'react';\nimport * as BooksAPI from '../BooksAPI';\nimport '../container/App.css';\nimport AddABookButton from '../components/AddABookButton';\nimport { Route } from 'react-router-dom';\nimport SearchBooks from '../components/SearchBooks';\nimport Book from '../components/Book';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books:[],\n      read: [],\n      currentlyReading: [],\n      wantToRead: []\n    }\n  }\n\n  componentDidMount() {\n    this.reload();\n  }\n\n  reload = ()=>{\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState({books:[...books]});\n        this.filterBooksByShelf(books);\n      })\n  }\n  \n  filterBooksByShelf = (books) => {\n    let currentlyReading =[];\n    let wantToRead =[];\n    let read =[];\n    books.forEach((book) => {\n      if (book.shelf === \"currentlyReading\" && !this.state.currentlyReading.includes(book.id)) {\n        currentlyReading.push(book);\n      }\n      else if (book.shelf === \"wantToRead\" && !this.state.wantToRead.includes(book.id)) {\n        wantToRead.push(book);\n      }\n      else if (book.shelf === \"read\" && !this.state.read.includes(book.id)) {\n        read.push(book);\n      }\n    })\n\n    this.setState({\n      currentlyReading: currentlyReading,\n      wantToRead: wantToRead,\n      read: read\n    });\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"app\">\n\n        <Route exact path=\"/search\" render={() =>\n          <SearchBooks books={this.state.books}\n                      reload = {this.reload}/>\n        } />\n\n        <Route exact path=\"/\" render={() => (\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyBooks</h1>\n            </div>\n            <div className=\"list-books-content\">\n              <div>\n                <div className=\"bookshelf\">\n                  <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                  <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                      {\n                        this.state.currentlyReading.map((book) =>\n\n                          (<Book key={book.id}\n                            book={book}\n                            books = {this.state.books}\n                            id={book.id}\n                            title={book.title}\n                            author={book.authors}\n                            preview={book.imageLinks}\n                            reload = {this.reload}\n                             />)\n                        )\n                      }\n                    </ol>\n                  </div>\n                </div>\n                <div className=\"bookshelf\">\n                  <h2 className=\"bookshelf-title\">Want to Read</h2>\n                  <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                      {\n                        this.state.wantToRead.map((book) =>\n\n                          (<Book key={book.id}\n                            book={book}\n                            books = {this.state.books}\n                            id={book.id}\n                            title={book.title}\n                            author={book.authors}\n                            preview={book.imageLinks}\n                            reload = {this.reload}\n                           />)\n                        )\n                      }\n                    </ol>\n                  </div>\n                </div>\n                <div className=\"bookshelf\">\n                  <h2 className=\"bookshelf-title\">Read</h2>\n                  <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                    {\n                        this.state.read.map((book) =>\n\n                          (<Book key={book.id}\n                            book={book}\n                            books = {this.state.books}\n                            id={book.id}\n                            title={book.title}\n                            author={book.authors}\n                            preview={book.imageLinks}\n                            reload = {this.reload}\n                           />)\n                        )\n                      }\n                    </ol>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <AddABookButton />\n          </div>\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}